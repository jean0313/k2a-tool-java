<#assign channelName = "${ctx.channelName}">
<#assign schemaName = "${ctx.schemaName}">
<#if ctx.messageSchemaFormat == "json">
    <#assign schemaName = "${capitalize(ctx.schemaName)}">
</#if>
<#assign upperCaseChannelName = "${toUpperCamelCase(channelName)}">
<#assign lowerCaseChannelName = "${toLowerCamelCase(channelName)}">
package ${gCtx.groupId}.${gCtx.packageName}.service;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import ${gCtx.groupId}.${gCtx.packageName}.model.${schemaName};
import com.ai.tx.core.annotation.ConsumerHandler;
import com.ai.tx.core.model.ConsumerEventProcessor;

import lombok.extern.slf4j.Slf4j;

/**
 * WARNING: This is an autogenerated class. Do not modify this class.
 *
 */
 @Service
 @Slf4j
 public class ${upperCaseChannelName}ConsumerService {

    @Autowired
    @Qualifier("${upperCaseChannelName}ConsumerProcessor")
    ConsumerEventProcessor<String, ${schemaName}> ${lowerCaseChannelName}Processor;

    @ConsumerHandler(validator="${upperCaseChannelName}ConsumerValidator")
    @KafkaListener(topics = "${channelName}", groupId = "", containerFactory = "${upperCaseChannelName}ConsumerFactoryConfig")
    public void ${uncapitalize(schemaName)}(ConsumerRecord<String, ${schemaName}> message) throws Exception {
        log.info(" Timestamp: " + message.timestamp() + ", Partition: " + message.partition());
        log.info(String.format("Received message on Kafka Topics: %s", message.value()));
        ${lowerCaseChannelName}Processor.process(message);
    }
 }